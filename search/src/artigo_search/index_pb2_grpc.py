# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import index_pb2 as index__pb2


class IndexStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/artigo.search.Index/get',
                request_serializer=index__pb2.GetRequest.SerializeToString,
                response_deserializer=index__pb2.GetReply.FromString,
                )
        self.status = channel.unary_unary(
                '/artigo.search.Index/status',
                request_serializer=index__pb2.StatusRequest.SerializeToString,
                response_deserializer=index__pb2.StatusReply.FromString,
                )
        self.delete = channel.unary_unary(
                '/artigo.search.Index/delete',
                request_serializer=index__pb2.DeleteRequest.SerializeToString,
                response_deserializer=index__pb2.DeleteReply.FromString,
                )
        self.search = channel.unary_unary(
                '/artigo.search.Index/search',
                request_serializer=index__pb2.SearchRequest.SerializeToString,
                response_deserializer=index__pb2.SearchReply.FromString,
                )
        self.aggregate = channel.unary_unary(
                '/artigo.search.Index/aggregate',
                request_serializer=index__pb2.AggregateRequest.SerializeToString,
                response_deserializer=index__pb2.AggregateReply.FromString,
                )
        self.reconcile = channel.unary_unary(
                '/artigo.search.Index/reconcile',
                request_serializer=index__pb2.ReconcileRequest.SerializeToString,
                response_deserializer=index__pb2.ReconcileReply.FromString,
                )
        self.insert = channel.stream_stream(
                '/artigo.search.Index/insert',
                request_serializer=index__pb2.InsertRequest.SerializeToString,
                response_deserializer=index__pb2.InsertReply.FromString,
                )
        self.list_search_result = channel.unary_unary(
                '/artigo.search.Index/list_search_result',
                request_serializer=index__pb2.ListSearchResultRequest.SerializeToString,
                response_deserializer=index__pb2.ListSearchResultReply.FromString,
                )


class IndexServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aggregate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reconcile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_search_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IndexServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=index__pb2.GetRequest.FromString,
                    response_serializer=index__pb2.GetReply.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=index__pb2.StatusRequest.FromString,
                    response_serializer=index__pb2.StatusReply.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=index__pb2.DeleteRequest.FromString,
                    response_serializer=index__pb2.DeleteReply.SerializeToString,
            ),
            'search': grpc.unary_unary_rpc_method_handler(
                    servicer.search,
                    request_deserializer=index__pb2.SearchRequest.FromString,
                    response_serializer=index__pb2.SearchReply.SerializeToString,
            ),
            'aggregate': grpc.unary_unary_rpc_method_handler(
                    servicer.aggregate,
                    request_deserializer=index__pb2.AggregateRequest.FromString,
                    response_serializer=index__pb2.AggregateReply.SerializeToString,
            ),
            'reconcile': grpc.unary_unary_rpc_method_handler(
                    servicer.reconcile,
                    request_deserializer=index__pb2.ReconcileRequest.FromString,
                    response_serializer=index__pb2.ReconcileReply.SerializeToString,
            ),
            'insert': grpc.stream_stream_rpc_method_handler(
                    servicer.insert,
                    request_deserializer=index__pb2.InsertRequest.FromString,
                    response_serializer=index__pb2.InsertReply.SerializeToString,
            ),
            'list_search_result': grpc.unary_unary_rpc_method_handler(
                    servicer.list_search_result,
                    request_deserializer=index__pb2.ListSearchResultRequest.FromString,
                    response_serializer=index__pb2.ListSearchResultReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'artigo.search.Index', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Index(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/get',
            index__pb2.GetRequest.SerializeToString,
            index__pb2.GetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/status',
            index__pb2.StatusRequest.SerializeToString,
            index__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/delete',
            index__pb2.DeleteRequest.SerializeToString,
            index__pb2.DeleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/search',
            index__pb2.SearchRequest.SerializeToString,
            index__pb2.SearchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aggregate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/aggregate',
            index__pb2.AggregateRequest.SerializeToString,
            index__pb2.AggregateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reconcile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/reconcile',
            index__pb2.ReconcileRequest.SerializeToString,
            index__pb2.ReconcileReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/artigo.search.Index/insert',
            index__pb2.InsertRequest.SerializeToString,
            index__pb2.InsertReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_search_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/artigo.search.Index/list_search_result',
            index__pb2.ListSearchResultRequest.SerializeToString,
            index__pb2.ListSearchResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
